<?xml version="1.0" encoding="UTF-8"?>
    <!-- ================================================================== 
    		Introduction to Service Design and Engineering Laboratory
    		Description: ANT build script for the assignment 
    		Author: yuly sanchez
    	 ================================================================== -->
    <!--
    Notes: 
    
    * This build file includes targets to download and install in your local project the Apache IVY jar
    * IVY is used to manage dependencies on projects (e.g., jaxb libraries, jackson libraries for json, etc.) 
    * 
       TO USE IVY IN YOUR PROJECTS IN ORDER TO GET MANAGE DEPENDENCIES, MAKE SURE THE FOLLOWING LINES ARE
       IN YOUR BUILD.XML UNTILL 'IVY-END-LINE' 
	-->

    <project name="sdelab09" default="install" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
        
    	<!-- PART 1: Ivy properties, download, installation and configuration -->
        <property name="ivy.install.version" value="2.4.0-rc1" />
        <property name="ivy.jar.dir" value="${basedir}/ivy" />
        <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    	
        <!-- The target "download-ivy" will download ivy.jar and place it in the "ivy" folder -->
        <target name="download-ivy" unless="skip.download">
            <mkdir dir="${ivy.jar.dir}" />
            <echo message="installing ivy..." />
            <get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" dest="${ivy.jar.file}" usetimestamp="true" />
        </target>
        
    	<!-- The target "install-ivy" will try to load ivy here from local ivy dir, in case the user has not already dropped it into ant's lib dir and the dependency the 'init' target -->
        <target name="install-ivy" depends="download-ivy" description="--> install ivy">
            <path id="ivy.lib.path">
                <fileset dir="${ivy.jar.dir}" includes="*.jar" />
            </path>
            <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
        </target>
        
    	<!-- PART 2: General properties definitions -->
        <property name="build.dir" value="build" />
        <property name="src.dir" value="src" />
        <property name="lib.dir" value="WebContent/WEB-INF/lib" />
        <property name="web.dir" value="." />
        <property name="webcontent.dir" value="WebContent" />
        
    	<!-- The target "resolve" will download the dependencies to your lib folder -->
        <target name="resolve" depends="install-ivy" description="--> retrieve dependencies with ivy">
            <ivy:retrieve pattern="${lib.dir}/[type]s-[artifact]-[revision].[ext]" />
        </target>
        
    	<!-- Set the paths where ivy libraries will be downloaded, use them as classpathref in your compilation and running tasks -->
        <path id="lib.path.id">
            <fileset dir="${lib.dir}" />
        </path>
        <path id="run.path.id">
            <path refid="lib.path.id" />
            <fileset dir="${build.dir}">
                <include name="*.class" />
                <include name="**/*.class" />
                <exclude name="**/*Test*" />
            </fileset>
        </path>
        
    	<!-- PART 3: compilation and execution targets for this session -->
        <target name="init" depends="install-ivy, resolve">
            <echo message="Init has been called" />
            <mkdir dir="${build.dir}" />
            <echo message="${build.dir} has been created" />
        </target>
    	
        <target name="clean">
        	<echo message="Clean has been called" />
        	<delete dir="${build.dir}" />
        	<echo message="${build.dir} has been deleted" />
        	<delete dir="${ivy.jar.dir}" />
        	<echo message="${ivy.jar.dir} has been deleted" />
        </target>
        
    	<target name="install" depends="clean, init">
    	<!--<target name="install">-->
            <echo message="Compile target has been called" />
            <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="lib.path.id" includeAntRuntime="false">
            </javac>
            <copy todir="${build.dir}" overwrite="true">
                <fileset dir="${src.dir}">
                    <include name="*.xml" />
                    <include name="**/*.xml" />
                </fileset>
            </copy>
            <copy todir="${build.dir}" overwrite="true">
                <fileset dir="${webcontent.dir}">
                    <include name="*.xml" />
                    <include name="**/*.xml" />
                </fileset>
            </copy>
        </target>
        
    	<target name="start">
            <echo message="app start introsde.document.endpoint.PeoplePublisher in ${build.dir}" />
            <java classname="introsde.document.endpoint.PeoplePublisher" classpath="${build.dir}" fork="true">
                <arg value="$JAVA_OPTS  -cp" />
                <classpath>
                    <path location="build" />
                    <fileset dir="WebContent/WEB-INF/lib">
                        <include name="**/*.jar" />
                        <include name="*.jar" />
                    </fileset>
                </classpath>
            </java>
        </target>
        
    	<target name="execute.client">
            <echo message="ant execute.client introsde.document.client.PeopleClient in ${build.dir}" />
            <java classname="introsde.document.client.PeopleClient" classpath="${build.dir}" fork="true">
                <arg value="$JAVA_OPTS  -cp" />
                <classpath>
                    <path location="build" />
                    <fileset dir="WebContent/WEB-INF/lib">
                        <include name="**/*.jar" />
                        <include name="*.jar" />
                    </fileset>
                </classpath>
            </java>
        </target>
        
    	<!-- The target "junit" will run the JUnit Tests and the output is XML, could also be plain-->
        <target name="junit">
            <echo message="Run tests" />
            <junit printsummary="yes" haltonfailure="no">
                <!-- Project classpath, must include junit.jar -->
                <classpath>
                    <path location="build" />
                    <fileset dir="WebContent/WEB-INF/lib">
                        <include name="**/*.jar" />
                        <include name="*.jar" />
                    </fileset>
                </classpath>
                <!-- test class -->
                <batchtest>
                    <fileset dir="build">
                        <include name="**/*Test*.class" /> 
                    </fileset>
                </batchtest>
            </junit>
        </target>
        
    	<!-- The target "create.war" that you make sure have created first the WebContent folder, including a META-INF folder, WEB-INF/web.xml file and WEB-INF/lib folder -->
        <target name="create.war" depends="install">
            <war destfile="sdelab06.war" webxml="${web.dir}/WebContent/WEB-INF/web.xml">
                <fileset dir="${web.dir}/WebContent">
                    <include name="**/*.*" />
                </fileset>
                <classes dir="${build.dir}" />
            </war>
        </target>
    </project>
